// AI Assistant —Å DeepSeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–ª—è TeacherUchit
class AIAssistant {
    constructor() {
        this.isOpen = false;
        this.currentUser = null;
        this.isPremium = false;
        this.conversationHistory = [];
        this.dailyQuestions = 0;
        this.maxFreeQuestions = 5;
        this.init();
    }

    init() {
        this.loadUserData();
        this.createAssistantWidget();
        this.loadConversationHistory();
        this.checkDailyLimit();
    }

    loadUserData() {
        const userData = JSON.parse(localStorage.getItem('user') || '{}');
        this.currentUser = userData;
        this.isPremium = userData.premium || false;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å
        const today = new Date().toDateString();
        const dailyData = JSON.parse(localStorage.getItem('aiDailyUsage') || '{}');
        this.dailyQuestions = dailyData[today] || 0;
    }

    checkDailyLimit() {
        if (!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions) {
            this.showLimitReached();
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞
    createAssistantWidget() {
        const widget = document.createElement('div');
        widget.className = 'ai-assistant-widget';
        widget.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è -->
            <button class="ai-toggle-btn" onclick="aiAssistant.toggleAssistant()">
                <svg class="icon icon-lg">
                    <use href="/assets/modern-icons.svg#icon-ai-assistant"></use>
                </svg>
                <div class="ai-pulse"></div>
                ${!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions ? 
                    '<div class="ai-limit-badge">–õ–∏–º–∏—Ç</div>' : 
                    this.dailyQuestions > 0 ? `<div class="ai-usage-badge">${this.dailyQuestions}/${this.maxFreeQuestions}</div>` : ''
                }
            </button>

            <!-- –ü–∞–Ω–µ–ª—å —á–∞—Ç–∞ -->
            <div class="ai-chat-panel" id="aiChatPanel">
                <div class="ai-chat-header">
                    <div class="ai-header-info">
                        <div class="ai-avatar">
                            <svg class="icon icon-md">
                                <use href="/assets/modern-icons.svg#icon-deepseek"></use>
                            </svg>
                        </div>
                        <div class="ai-header-text">
                            <h4>DeepSeek –ü–æ–º–æ—â–Ω–∏–∫</h4>
                            <span class="ai-status">
                                ${this.isPremium ? 
                                    '<span class="premium-badge">Premium</span>' : 
                                    `${this.dailyQuestions}/${this.maxFreeQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤`
                                }
                            </span>
                        </div>
                    </div>
                    <div class="ai-header-actions">
                        ${!this.isPremium ? `
                            <button class="btn btn-xs btn-warning" onclick="aiAssistant.showPremiumOffer()">
                                <svg class="icon icon-xs">
                                    <use href="/assets/modern-icons.svg#icon-premium"></use>
                                </svg>
                                Premium
                            </button>
                        ` : ''}
                        <button class="ai-close-btn" onclick="aiAssistant.toggleAssistant()">
                            <svg class="icon icon-sm">
                                <use href="/assets/modern-icons.svg#icon-error"></use>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="ai-chat-messages" id="aiChatMessages">
                    ${this.conversationHistory.length === 0 ? this.createWelcomeMessage() : ''}
                </div>

                <div class="ai-chat-input">
                    ${this.createQuickActions()}
                    <div class="ai-input-container">
                        <textarea 
                            id="aiMessageInput" 
                            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É..."
                            rows="1"
                            ${!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions ? 'disabled' : ''}
                        ></textarea>
                        <button 
                            class="ai-send-btn" 
                            onclick="aiAssistant.sendMessage()"
                            ${!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions ? 'disabled' : ''}
                        >
                            <svg class="icon icon-sm">
                                <use href="/assets/modern-icons.svg#icon-chat"></use>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(widget);
        this.setupEventListeners();
    }

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    createWelcomeMessage() {
        const role = this.currentUser.role;
        const name = this.currentUser.profile?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        let welcomeText = '';
        let suggestions = [];

        if (role === 'student') {
            welcomeText = `–ü—Ä–∏–≤–µ—Ç, ${name}! üëã –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏, –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º!`;
            suggestions = [
                '–û–±—ä—è—Å–Ω–∏ –º–Ω–µ —Ç–µ–º—É "–í–µ–ª–∏–∫–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è"',
                '–ü–æ–º–æ–≥–∏ —Å —ç—Å—Å–µ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é',
                '–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –≥—Ä–∞–∂–¥–∞–Ω –†–§?',
                '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ü–ª–∞—Ç–æ–Ω–∞'
            ];
        } else if (role === 'teacher') {
            welcomeText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}! üéì –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.`;
            suggestions = [
                '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏',
                '–ü—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∞–≤—É',
                '–ö–∞–∫ –æ–±—ä—è—Å–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã?',
                '–ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é'
            ];
        }

        return `
            <div class="ai-message ai-message-assistant">
                <div class="ai-message-avatar">
                    <svg class="icon icon-sm">
                        <use href="/assets/modern-icons.svg#icon-deepseek"></use>
                    </svg>
                </div>
                <div class="ai-message-content">
                    <div class="ai-message-text">${welcomeText}</div>
                    <div class="ai-suggestions">
                        ${suggestions.map(suggestion => `
                            <button class="ai-suggestion-btn" onclick="aiAssistant.sendSuggestion('${suggestion}')">
                                ${suggestion}
                            </button>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
    }

    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    createQuickActions() {
        const role = this.currentUser.role;
        
        let actions = [];
        if (role === 'student') {
            actions = [
                { icon: 'icon-materials', text: '–û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É', action: 'explain' },
                { icon: 'icon-assignments', text: '–ü–æ–º–æ—á—å —Å –î–ó', action: 'homework' },
                { icon: 'icon-grades', text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É', action: 'exam' }
            ];
        } else if (role === 'teacher') {
            actions = [
                { icon: 'icon-materials', text: '–ü–ª–∞–Ω —É—Ä–æ–∫–∞', action: 'lesson' },
                { icon: 'icon-assignments', text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', action: 'assignment' },
                { icon: 'icon-analytics', text: '–ú–µ—Ç–æ–¥–∏–∫–∞', action: 'methodology' }
            ];
        }

        return `
            <div class="ai-quick-actions">
                ${actions.map(action => `
                    <button class="ai-quick-btn" onclick="aiAssistant.quickAction('${action.action}')">
                        <svg class="icon icon-xs">
                            <use href="/assets/modern-icons.svg#${action.icon}"></use>
                        </svg>
                        ${action.text}
                    </button>
                `).join('')}
            </div>
        `;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        const input = document.getElementById('aiMessageInput');
        if (input) {
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            input.addEventListener('input', () => {
                this.autoResizeTextarea(input);
            });
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea
    autoResizeTextarea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
    toggleAssistant() {
        this.isOpen = !this.isOpen;
        const panel = document.getElementById('aiChatPanel');
        const widget = document.querySelector('.ai-assistant-widget');
        
        if (this.isOpen) {
            panel.classList.add('show');
            widget.classList.add('open');
        } else {
            panel.classList.remove('show');
            widget.classList.remove('open');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage(message = null) {
        const input = document.getElementById('aiMessageInput');
        const messageText = message || input.value.trim();
        
        if (!messageText) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions) {
            this.showPremiumOffer();
            return;
        }

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (!message) {
            input.value = '';
            input.style.height = 'auto';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage(messageText, 'user');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        this.showTypingIndicator();

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
            const response = await this.callDeepSeekAPI(messageText);
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            this.removeTypingIndicator();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
            this.addMessage(response, 'assistant');
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            this.incrementDailyUsage();
            
        } catch (error) {
            this.removeTypingIndicator();
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'assistant', true);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    sendSuggestion(suggestion) {
        this.sendMessage(suggestion);
    }

    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    quickAction(action) {
        const role = this.currentUser.role;
        let prompt = '';

        if (role === 'student') {
            switch (action) {
                case 'explain':
                    prompt = '–û–±—ä—è—Å–Ω–∏ –º–Ω–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–µ–º—É: ';
                    break;
                case 'homework':
                    prompt = '–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ ';
                    break;
                case 'exam':
                    prompt = '–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ ';
                    break;
            }
        } else if (role === 'teacher') {
            switch (action) {
                case 'lesson':
                    prompt = '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ —Ç–µ–º–µ: ';
                    break;
                case 'assignment':
                    prompt = '–ü—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ ';
                    break;
                case 'methodology':
                    prompt = '–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è ';
                    break;
            }
        }

        const input = document.getElementById('aiMessageInput');
        input.value = prompt;
        input.focus();
        this.autoResizeTextarea(input);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    addMessage(text, sender, isError = false) {
        const messagesContainer = document.getElementById('aiChatMessages');
        const messageEl = document.createElement('div');
        messageEl.className = `ai-message ai-message-${sender}`;
        
        if (sender === 'user') {
            messageEl.innerHTML = `
                <div class="ai-message-content">
                    <div class="ai-message-text">${text}</div>
                </div>
                <div class="ai-message-avatar">
                    <div class="avatar avatar-sm user-avatar">
                        ${this.currentUser.profile?.avatar ? 
                            `<img src="${this.currentUser.profile.avatar}" alt="User">` :
                            `<span>${this.getInitials(this.currentUser.profile?.name || 'User')}</span>`
                        }
                    </div>
                </div>
            `;
        } else {
            messageEl.innerHTML = `
                <div class="ai-message-avatar">
                    <svg class="icon icon-sm">
                        <use href="/assets/modern-icons.svg#icon-deepseek"></use>
                    </svg>
                </div>
                <div class="ai-message-content">
                    <div class="ai-message-text ${isError ? 'error' : ''}">${text}</div>
                    ${!isError ? `
                        <div class="ai-message-actions">
                            <button class="ai-action-btn" onclick="aiAssistant.copyMessage(this)" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                                <svg class="icon icon-xs">
                                    <use href="/assets/modern-icons.svg#icon-copy"></use>
                                </svg>
                            </button>
                            <button class="ai-action-btn" onclick="aiAssistant.likeMessage(this)" title="–ü–æ–ª–µ–∑–Ω–æ">
                                <svg class="icon icon-xs">
                                    <use href="/assets/modern-icons.svg#icon-success"></use>
                                </svg>
                            </button>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        messagesContainer.appendChild(messageEl);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.conversationHistory.push({ text, sender, timestamp: new Date().toISOString() });
        this.saveConversationHistory();
    }

    // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    showTypingIndicator() {
        const messagesContainer = document.getElementById('aiChatMessages');
        const typingEl = document.createElement('div');
        typingEl.className = 'ai-message ai-message-assistant ai-typing';
        typingEl.id = 'aiTypingIndicator';
        typingEl.innerHTML = `
            <div class="ai-message-avatar">
                <svg class="icon icon-sm">
                    <use href="/assets/modern-icons.svg#icon-deepseek"></use>
                </svg>
            </div>
            <div class="ai-message-content">
                <div class="ai-typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        messagesContainer.appendChild(typingEl);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    removeTypingIndicator() {
        const typingEl = document.getElementById('aiTypingIndicator');
        if (typingEl) {
            typingEl.remove();
        }
    }

    // –í—ã–∑–æ–≤ DeepSeek API (–∏–º–∏—Ç–∞—Ü–∏—è)
    async callDeepSeekAPI(message) {
        // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const role = this.currentUser.role;
        const responses = this.generateContextualResponse(message, role);
        
        return responses[Math.floor(Math.random() * responses.length)];
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    generateContextualResponse(message, role) {
        const lowerMessage = message.toLowerCase();
        
        // –û—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        if (role === 'student') {
            if (lowerMessage.includes('–∏—Å—Ç–æ—Ä–∏—è') || lowerMessage.includes('—Ä–µ–≤–æ–ª—é—Ü–∏—è')) {
                return [
                    '–í–µ–ª–∏–∫–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è (1789-1799) –±—ã–ª–∞ –≤–∞–∂–Ω–µ–π—à–∏–º —Å–æ–±—ã—Ç–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –§—Ä–∞–Ω—Ü–∏–∏. –û–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞. –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã: —Å–æ–∑—ã–≤ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö —à—Ç–∞—Ç–æ–≤, –≤–∑—è—Ç–∏–µ –ë–∞—Å—Ç–∏–ª–∏–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ –î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞.',
                    '–†–µ–≤–æ–ª—é—Ü–∏—è –ø—Ä–∏–≤–µ–ª–∞ –∫ —Å–≤–µ—Ä–∂–µ–Ω–∏—é –º–æ–Ω–∞—Ä—Ö–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —Ä–µ—Å–ø—É–±–ª–∏–∫–∏. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã: –†–æ–±–µ—Å–ø—å–µ—Ä, –î–∞–Ω—Ç–æ–Ω, –ú–∞—Ä–∞—Ç. –†–µ–≤–æ–ª—é—Ü–∏—è –æ–∫–∞–∑–∞–ª–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏ –≤ –º–∏—Ä–µ.'
                ];
            }
            
            if (lowerMessage.includes('–ø—Ä–∞–≤–æ') || lowerMessage.includes('–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è')) {
                return [
                    '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –∏ —Å–≤–æ–±–æ–¥—ã –≥—Ä–∞–∂–¥–∞–Ω: –ø—Ä–∞–≤–æ –Ω–∞ –∂–∏–∑–Ω—å, —Å–≤–æ–±–æ–¥—É —Å–ª–æ–≤–∞, —Å–æ–±—Ä–∞–Ω–∏–π, –≤–µ—Ä–æ–∏—Å–ø–æ–≤–µ–¥–∞–Ω–∏—è. –¢–∞–∫–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞: –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å, —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ.',
                    '–ü—Ä–∞–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω –∑–∞—â–∏—â–∞—é—Ç—Å—è —Å—É–¥–µ–±–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ö–∞–∂–¥—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Å—É–¥–µ–±–Ω–æ–µ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–µ–∑—É–º–ø—Ü–∏—é –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç–∏.'
                ];
            }
            
            if (lowerMessage.includes('—ç–∫–æ–Ω–æ–º–∏–∫–∞') || lowerMessage.includes('—Ä—ã–Ω–æ–∫')) {
                return [
                    '–†—ã–Ω–æ—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, —á–∞—Å—Ç–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –ø–æ –∑–∞–∫–æ–Ω—É —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏, –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ.',
                    '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä—ã–Ω–∫–∞: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤, —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π. –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤, –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫—Ä–∏–∑–∏—Å—ã.'
                ];
            }
        }
        
        // –û—Ç–≤–µ—Ç—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
        if (role === 'teacher') {
            if (lowerMessage.includes('–ø–ª–∞–Ω —É—Ä–æ–∫–∞') || lowerMessage.includes('—É—Ä–æ–∫')) {
                return [
                    '–ü–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏:\n1. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (2 –º–∏–Ω)\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (8 –º–∏–Ω)\n3. –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã (25 –º–∏–Ω)\n4. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (8 –º–∏–Ω)\n5. –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (2 –º–∏–Ω)\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã: —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –≥—Ä—É–ø–ø–æ–≤—ã–µ –¥–∏—Å–∫—É—Å—Å–∏–∏.',
                    '–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n- –ù–∞—á–∞—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ–π—Å-–º–µ—Ç–æ–¥—ã\n- –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–±–∞—Ç—ã\n- –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã\n- –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π'
                ];
            }
            
            if (lowerMessage.includes('–∑–∞–¥–∞–Ω–∏–µ') || lowerMessage.includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')) {
                return [
                    '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∞–≤—É:\n1. –†–∞–∑–±–æ—Ä —Å—É–¥–µ–±–Ω—ã—Ö –∫–µ–π—Å–æ–≤\n2. –†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ "–°—É–¥–µ–±–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ"\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö –ø–∞–º—è—Ç–æ–∫\n4. –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤\n5. –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ "–ü—Ä–∞–≤–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏"',
                    '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏:\n- –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∏–∫—Å–æ–≤\n- –ò–Ω—Ç–µ—Ä–≤—å—é —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏\n- –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏\n- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n- –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤'
                ];
            }
        }
        
        // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        return [
            '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.',
            '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–∞ —Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.',
            '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —ç—Ç—É —Ç–µ–º—É –≥–ª—É–±–∂–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.'
        ];
    }

    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    incrementDailyUsage() {
        this.dailyQuestions++;
        
        const today = new Date().toDateString();
        const dailyData = JSON.parse(localStorage.getItem('aiDailyUsage') || '{}');
        dailyData[today] = this.dailyQuestions;
        localStorage.setItem('aiDailyUsage', JSON.stringify(dailyData));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUsageDisplay();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if (!this.isPremium && this.dailyQuestions >= this.maxFreeQuestions) {
            this.showLimitReached();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    updateUsageDisplay() {
        const statusEl = document.querySelector('.ai-status');
        const toggleBtn = document.querySelector('.ai-toggle-btn');
        
        if (statusEl && !this.isPremium) {
            statusEl.innerHTML = `${this.dailyQuestions}/${this.maxFreeQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        const existingBadge = toggleBtn.querySelector('.ai-usage-badge, .ai-limit-badge');
        if (existingBadge) {
            existingBadge.remove();
        }
        
        if (!this.isPremium) {
            const badge = document.createElement('div');
            if (this.dailyQuestions >= this.maxFreeQuestions) {
                badge.className = 'ai-limit-badge';
                badge.textContent = '–õ–∏–º–∏—Ç';
            } else if (this.dailyQuestions > 0) {
                badge.className = 'ai-usage-badge';
                badge.textContent = `${this.dailyQuestions}/${this.maxFreeQuestions}`;
            }
            if (badge.textContent) {
                toggleBtn.appendChild(badge);
            }
        }
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    showLimitReached() {
        const input = document.getElementById('aiMessageInput');
        const sendBtn = document.querySelector('.ai-send-btn');
        
        if (input) {
            input.disabled = true;
            input.placeholder = '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!';
        }
        
        if (sendBtn) {
            sendBtn.disabled = true;
        }
        
        this.addMessage(
            '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (5/–¥–µ–Ω—å). –ü–æ–ª—É—á–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É! üöÄ',
            'assistant'
        );
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Premium
    showPremiumOffer() {
        const modal = document.createElement('div');
        modal.className = 'modal-backdrop show';
        
        const role = this.currentUser.role;
        const benefits = role === 'student' ? 
            [
                '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è',
                '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º',
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã',
                '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏'
            ] :
            [
                '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É',
                '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —É—Ä–æ–∫–æ–≤ —Å –ò–ò',
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π',
                '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞',
                '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–º–∏—É–º-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤'
            ];

        modal.innerHTML = `
            <div class="modal show">
                <div class="modal-header">
                    <h3 class="modal-title">
                        <svg class="icon icon-md text-warning">
                            <use href="/assets/modern-icons.svg#icon-premium"></use>
                        </svg>
                        TeacherUchit Premium
                    </h3>
                    <button type="button" class="modal-close" onclick="this.closest('.modal-backdrop').remove()">
                        <svg class="icon icon-md">
                            <use href="/assets/modern-icons.svg#icon-error"></use>
                        </svg>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="premium-offer">
                        <div class="premium-hero">
                            <div class="premium-icon">
                                <svg class="icon icon-xl">
                                    <use href="/assets/modern-icons.svg#icon-premium"></use>
                                </svg>
                            </div>
                            <h4>–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</h4>
                            <p>–ü–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã TeacherUchit</p>
                        </div>
                        
                        <div class="premium-benefits">
                            <h5>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:</h5>
                            <ul class="benefits-list">
                                ${benefits.map(benefit => `
                                    <li>
                                        <svg class="icon icon-sm text-success">
                                            <use href="/assets/modern-icons.svg#icon-success"></use>
                                        </svg>
                                        ${benefit}
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                        
                        <div class="premium-pricing">
                            <div class="price-card">
                                <div class="price-header">
                                    <h6>–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</h6>
                                    <div class="price">
                                        <span class="amount">299</span>
                                        <span class="currency">‚ÇΩ/–º–µ—Å</span>
                                    </div>
                                </div>
                                <button class="btn btn-primary btn-lg" onclick="aiAssistant.activatePremium('monthly')">
                                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                                </button>
                            </div>
                            
                            <div class="price-card featured">
                                <div class="price-badge">–í—ã–≥–æ–¥–Ω–æ</div>
                                <div class="price-header">
                                    <h6>–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</h6>
                                    <div class="price">
                                        <span class="amount">199</span>
                                        <span class="currency">‚ÇΩ/–º–µ—Å</span>
                                    </div>
                                    <div class="price-note">–≠–∫–æ–Ω–æ–º–∏—è 1200‚ÇΩ –≤ –≥–æ–¥</div>
                                </div>
                                <button class="btn btn-warning btn-lg" onclick="aiAssistant.activatePremium('yearly')">
                                    –ü–æ–ª—É—á–∏—Ç—å Premium
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è Premium (–∏–º–∏—Ç–∞—Ü–∏—è)
    activatePremium(plan) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium
        this.isPremium = true;
        this.currentUser.premium = true;
        this.currentUser.premiumPlan = plan;
        this.currentUser.premiumActivated = new Date().toISOString();
        
        localStorage.setItem('user', JSON.stringify(this.currentUser));
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelector('.modal-backdrop')?.remove();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updatePremiumStatus();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showToast('üéâ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!', 'success');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Premium
    updatePremiumStatus() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const statusEl = document.querySelector('.ai-status');
        if (statusEl) {
            statusEl.innerHTML = '<span class="premium-badge">Premium</span>';
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É Premium
        const premiumBtn = document.querySelector('.ai-header-actions .btn-warning');
        if (premiumBtn) {
            premiumBtn.remove();
        }
        
        // –í–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥
        const input = document.getElementById('aiMessageInput');
        const sendBtn = document.querySelector('.ai-send-btn');
        
        if (input) {
            input.disabled = false;
            input.placeholder = '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É...';
        }
        
        if (sendBtn) {
            sendBtn.disabled = false;
        }
        
        // –£–±–∏—Ä–∞–µ–º –±–µ–π–¥–∂ –ª–∏–º–∏—Ç–∞
        const limitBadge = document.querySelector('.ai-limit-badge');
        if (limitBadge) {
            limitBadge.remove();
        }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    copyMessage(button) {
        const messageText = button.closest('.ai-message-content').querySelector('.ai-message-text').textContent;
        navigator.clipboard.writeText(messageText).then(() => {
            this.showToast('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        });
    }

    // –õ–∞–π–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    likeMessage(button) {
        button.classList.add('liked');
        button.disabled = true;
        this.showToast('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', 'info');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
    getInitials(name) {
        return name
            .split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    saveConversationHistory() {
        localStorage.setItem('aiConversationHistory', JSON.stringify(this.conversationHistory));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    loadConversationHistory() {
        const history = JSON.parse(localStorage.getItem('aiConversationHistory') || '[]');
        this.conversationHistory = history;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const messagesContainer = document.getElementById('aiChatMessages');
        if (messagesContainer && history.length > 0) {
            messagesContainer.innerHTML = '';
            history.forEach(msg => {
                this.addMessageToUI(msg.text, msg.sender);
            });
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    addMessageToUI(text, sender) {
        const messagesContainer = document.getElementById('aiChatMessages');
        const messageEl = document.createElement('div');
        messageEl.className = `ai-message ai-message-${sender}`;
        
        if (sender === 'user') {
            messageEl.innerHTML = `
                <div class="ai-message-content">
                    <div class="ai-message-text">${text}</div>
                </div>
                <div class="ai-message-avatar">
                    <div class="avatar avatar-sm user-avatar">
                        ${this.currentUser.profile?.avatar ? 
                            `<img src="${this.currentUser.profile.avatar}" alt="User">` :
                            `<span>${this.getInitials(this.currentUser.profile?.name || 'User')}</span>`
                        }
                    </div>
                </div>
            `;
        } else {
            messageEl.innerHTML = `
                <div class="ai-message-avatar">
                    <svg class="icon icon-sm">
                        <use href="/assets/modern-icons.svg#icon-deepseek"></use>
                    </svg>
                </div>
                <div class="ai-message-content">
                    <div class="ai-message-text">${text}</div>
                    <div class="ai-message-actions">
                        <button class="ai-action-btn" onclick="aiAssistant.copyMessage(this)" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                            <svg class="icon icon-xs">
                                <use href="/assets/modern-icons.svg#icon-copy"></use>
                            </svg>
                        </button>
                        <button class="ai-action-btn" onclick="aiAssistant.likeMessage(this)" title="–ü–æ–ª–µ–∑–Ω–æ">
                            <svg class="icon icon-xs">
                                <use href="/assets/modern-icons.svg#icon-success"></use>
                            </svg>
                        </button>
                    </div>
                </div>
            `;
        }

        messagesContainer.appendChild(messageEl);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type} show`;
        
        const iconMap = {
            success: 'icon-success',
            error: 'icon-error',
            warning: 'icon-warning',
            info: 'icon-info'
        };

        toast.innerHTML = `
            <svg class="toast-icon icon icon-sm">
                <use href="/assets/modern-icons.svg#${iconMap[type]}"></use>
            </svg>
            <div class="toast-content">
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="this.parentElement.remove()">
                <svg class="icon icon-sm">
                    <use href="/assets/modern-icons.svg#icon-error"></use>
                </svg>
            </button>
        `;

        let container = document.querySelector('.toast-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            document.body.appendChild(container);
        }

        container.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const aiAssistant = new AIAssistant();
window.aiAssistant = aiAssistant;