rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Функция для проверки аутентификации
    function isAuthenticated() {
      return request.auth != null;
    }

    // Функция для проверки владельца документа
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Правила для коллекции users
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Запрещаем удаление пользователей
    }

    // Правила для коллекции lessons
    match /lessons/{lessonId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Правила для коллекции tests
    match /tests/{testId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    // Правила для коллекции results
    match /results/{resultId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher'
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }

    // Правила для других коллекций
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 