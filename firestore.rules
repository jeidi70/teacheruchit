rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow teachers to read student profiles they're connected to
      allow read: if request.auth != null && 
        request.auth.token.role == 'teacher' &&
        resource.data.teacherId == request.auth.uid;
    }
    
    // Teachers collection - only authenticated teachers can access
    match /teachers/{teacherId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == teacherId &&
        request.auth.token.role == 'teacher';
        
      // Allow students to read their teacher's public info
      allow read: if request.auth != null &&
        request.auth.token.role == 'student' &&
        resource.data.isPublic == true;
    }
    
    // Students collection - only authenticated students can access
    match /students/{studentId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == studentId &&
        request.auth.token.role == 'student';
        
      // Allow teachers to read their students' profiles
      allow read: if request.auth != null &&
        request.auth.token.role == 'teacher' &&
        resource.data.teacherId == request.auth.uid;
    }
    
    // Lessons collection
    match /lessons/{lessonId} {
      // Teachers can create, read, update, delete their own lessons
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'teacher' &&
        resource.data.teacherId == request.auth.uid;
        
      // Students can read lessons from their teacher
      allow read: if request.auth != null &&
        request.auth.token.role == 'student' &&
        resource.data.teacherId in get(/databases/$(database)/documents/students/$(request.auth.uid)).data.teacherIds;
    }
    
    // Tests collection
    match /tests/{testId} {
      // Teachers can create, read, update, delete their own tests
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'teacher' &&
        resource.data.teacherId == request.auth.uid;
        
      // Students can read tests from their teacher
      allow read: if request.auth != null &&
        request.auth.token.role == 'student' &&
        resource.data.teacherId in get(/databases/$(database)/documents/students/$(request.auth.uid)).data.teacherIds;
    }
    
    // Test results collection
    match /testResults/{resultId} {
      // Students can create and read their own results
      allow create, read: if request.auth != null && 
        request.auth.token.role == 'student' &&
        request.auth.uid == resource.data.studentId;
        
      // Teachers can read results for their tests
      allow read: if request.auth != null &&
        request.auth.token.role == 'teacher' &&
        request.auth.uid == resource.data.teacherId;
        
      // Teachers can update (grade) results for their tests
      allow update: if request.auth != null &&
        request.auth.token.role == 'teacher' &&
        request.auth.uid == resource.data.teacherId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['grade', 'feedback', 'gradedAt']);
    }
    
    // Progress tracking collection
    match /progress/{progressId} {
      // Students can read/write their own progress
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'student' &&
        request.auth.uid == resource.data.studentId;
        
      // Teachers can read progress of their students
      allow read: if request.auth != null &&
        request.auth.token.role == 'teacher' &&
        request.auth.uid == resource.data.teacherId;
    }
    
    // Email templates collection (admin only)
    match /emailTemplates/{templateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Email logs collection (admin only)
    match /emailLogs/{logId} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Phone verification collection (temporary data)
    match /phoneVerification/{verificationId} {
      allow create: if request.auth == null; // Allow creation during registration
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
    }
    
    // Class/Group management
    match /classes/{classId} {
      // Teachers can create and manage their classes
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'teacher' &&
        request.auth.uid == resource.data.teacherId;
        
      // Students can read classes they're enrolled in
      allow read: if request.auth != null &&
        request.auth.token.role == 'student' &&
        request.auth.uid in resource.data.studentIds;
    }
    
    // Chat/Messages (if implemented)
    match /messages/{messageId} {
      // Users can read messages in conversations they're part of
      allow read: if request.auth != null &&
        request.auth.uid in resource.data.participants;
        
      // Users can create messages in conversations they're part of
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants &&
        request.auth.uid == request.resource.data.senderId;
    }
    
    // System announcements (read-only for users)
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
    }
  }
} 