rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Функции-помощники
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'phone', 'createdAt']) &&
        data.firstName is string && data.firstName.size() > 0 &&
        data.lastName is string && data.lastName.size() > 0 &&
        data.email is string && data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        data.phone is string && data.phone.matches('^\\+7 \\(\\d{3}\\) \\d{3}-\\d{2}-\\d{2}$');
    }

    // Правила для коллекции users
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || hasRole('teacher'));
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserData();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Запрещаем удаление пользователей
      
      // Правила для подколлекции loginHistory
      match /loginHistory/{historyId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId);
        allow update, delete: if false;
      }
      
      // Правила для подколлекции progress (для учеников)
      match /progress/{progressId} {
        allow read: if isAuthenticated() && (isOwner(userId) || hasRole('teacher'));
        allow create, update: if isAuthenticated() && (isOwner(userId) || hasRole('teacher'));
        allow delete: if false;
      }
    }

    // Правила для коллекции materials
    match /materials/{materialId} {
      allow read: if isAuthenticated();
      allow create, update: if hasRole('teacher');
      allow delete: if hasRole('teacher');
    }

    // Правила для коллекции assignments
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow create, update: if hasRole('teacher');
      allow delete: if hasRole('teacher');
    }

    // Правила для коллекции submissions
    match /submissions/{submissionId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        hasRole('teacher')
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.studentId);
      allow update: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        hasRole('teacher')
      );
      allow delete: if false;
    }
  }
} 